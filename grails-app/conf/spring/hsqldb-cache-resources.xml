<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/util
    http://www.springframework.org/schema/util/spring-util.xsd">

<bean id="cacheManager"
          class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
          <property name = "configLocation" value = "classpath:ehcache-springcache.xml"/>
    </bean>

    <bean id="cacheProviderFacade"
          class="org.springmodules.cache.provider.ehcache.EhCacheFacade">
        <property name="cacheManager" ref="cacheManager"/>
    </bean>

    <bean id="cacheModelReadOnly" class="org.springmodules.cache.provider.ehcache.EhCacheCachingModel">
        <property name="cacheName" value="thirdLevel-RO"/>
    </bean>

    <bean id="cacheModelPTDTO" class="org.springmodules.cache.provider.ehcache.EhCacheCachingModel">
        <property name="cacheName" value="thirdLevel-RW"/>
    </bean>

    <bean id="flushModelPTDTO" class="org.springmodules.cache.provider.ehcache.EhCacheFlushingModel">
        <property name="cacheNames" value="thirdLevel-RW"/>
        <property name="flushBeforeMethodExecution" value="true"/>
    </bean>

    <!-- Item Price cache configuration. -->
    <bean id="cacheModelItemPrice" class="org.springmodules.cache.provider.ehcache.EhCacheCachingModel">
        <property name="cacheName" value="itemPriceCache"/>
    </bean>

    <bean id="flushModelItemPrice" class="org.springmodules.cache.provider.ehcache.EhCacheFlushingModel">
        <property name="cacheNames" value="itemPriceCache"/>
        <property name="flushBeforeMethodExecution" value="true"/>
    </bean>

    <!-- Currency cache configuration. -->
    <bean id="cacheModelCurrency" class="org.springmodules.cache.provider.ehcache.EhCacheCachingModel">
        <property name="cacheName" value="currencyCache"/>
    </bean>

    <bean id="flushModelCurrency" class="org.springmodules.cache.provider.ehcache.EhCacheFlushingModel">
        <property name="cacheNames" value="currencyCache"/>
        <property name="flushBeforeMethodExecution" value="true"/>
    </bean>

	<!-- Preference cache configuration. -->
    <bean id="cacheModelPreference" class="org.springmodules.cache.provider.ehcache.EhCacheCachingModel">
        <property name="cacheName" value="preferenceCache"/>
    </bean>

    <bean id="flushModelPreference" class="org.springmodules.cache.provider.ehcache.EhCacheFlushingModel">
        <property name="cacheNames" value="preferenceCache"/>
        <property name="flushBeforeMethodExecution" value="true"/>
    </bean>

    <!-- Mediation caching -->
    <bean id="priceModelMediationCache" class="org.springmodules.cache.provider.ehcache.EhCacheCachingModel">
        <property name="cacheName" value="mediationCache"/>
    </bean>

    <!-- Internal event processing configuration for the 'InternalEventsRulesTask' plug-in -->
    <!-- List of internal events that the rules task subscribes to -->
    <util:list id="invoiceEvents">
        <value>com.sapienter.jbilling.server.order.event.OrderToInvoiceEvent</value>
    </util:list>

    <!-- map the configured events to a specific plug-in instance by id -->
    <util:map id="internalEventsRulesTaskConfig">
        <entry key="540" value-ref="invoiceEvents"/>
    </util:map>
    
    <!-- HSQLDB in-memory database -->
    <bean id="memcacheDataSource"
          class="org.springframework.jdbc.datasource.SingleConnectionDataSource"
          lazy-init="true">
        <property name="url" value="jdbc:hsqldb:mem:cacheDB"/>
        <property name="driverClassName" value="org.hsqldb.jdbcDriver"/>
        <property name="username" value="sa"/>
        <property name="password" value=""/>
    </bean>

    <bean id="memcacheTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="memcacheDataSource"/>
    </bean>

    <bean id="memcacheTransactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
        <property name="transactionManager" ref="memcacheTransactionManager"/>
    </bean>

    <bean id="memcacheJdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="memcacheDataSource"/>
    </bean>

    <!-- Example JDBC Reader for cache loading -->
    <!--
     <bean id="jdbcReader"
         class="com.sapienter.jbilling.server.mediation.task.StatelessJDBCReader">
         <property name="parameters">
             <map>
                 <entry key="url" value="jdbc:postgresql://localhost:5432/jbilling_test" />
                 <entry key="driver" value="org.postgresql.Driver" />
                 <entry key="username" value="jbilling" />
                 <entry key="password" value="" />
                 <entry key="table_name" value="cdr" />
                 <entry key="batch_size" value="100" />
             </map>
         </property>
     </bean>
      -->

    <bean id="pricingFileReader"
          class="com.sapienter.jbilling.server.mediation.task.SeparatorFileReader">
        <property name="parameters">
             <map>
                <entry key="format_file" value="RateCard.xml"/>
                <entry key="suffix" value="cvs"/>
             </map>
        </property>
    </bean>

    <bean id="pricingLoader"
          class="com.sapienter.jbilling.server.mediation.cache.BasicLoaderImpl" lazy-init="true" init-method="init">
        <property name="jdbcTemplate" ref="memcacheJdbcTemplate"/>
        <property name="transactionTemplate" ref="memcacheTransactionTemplate"/>
        <property name="reader" ref="pricingFileReader"/>
        <property name="indexColumnNames" value="dgts"/>
    </bean>

    <bean id="pricingFinder" class="com.sapienter.jbilling.server.mediation.cache.PricingFinder" init-method="init">
        <constructor-arg ref="memcacheJdbcTemplate"/>
        <constructor-arg ref="pricingLoader"/>
    </bean>

    <!-- NANPA call identification data -->
    <bean id="callIdentificationReader"
          class="com.sapienter.jbilling.server.mediation.task.StatelessJDBCReader"
          lazy-init="true">
        <property name="parameters">
            <map>
                <entry key="url" value="jdbc:mysql://localhost:3306/jbilling_test"/>
                <entry key="driver" value="com.mysql.cj.jdbc.Driver"/>
                <entry key="username" value="jbilling"/>
                <entry key="password" value="password"/>
                <entry key="table_name" value="rate_center_table"/>
                <entry key="batch_size" value="100"/>
            </map>
        </property>
        <property name="entityId" value="1"/>
    </bean>

    <bean id="callIdentificationLoader"
          class="com.sapienter.jbilling.server.mediation.cache.BasicLoaderImpl"
          init-method="init"
          lazy-init="true">
        <property name="jdbcTemplate" ref="memcacheJdbcTemplate"/>
        <property name="transactionTemplate" ref="memcacheTransactionTemplate"/>
        <property name="reader" ref="callIdentificationReader"/>
        <property name="tableName" value="rate_center_table"/>
        <property name="indexName" value="rate_center_idx"/>
        <property name="indexColumnNames" value="intl_code,ocn,rate_center"/>
    </bean>

    <bean id="callIdentificationFinder"
          class="com.sapienter.jbilling.server.mediation.cache.NANPACallIdentificationFinder"
          init-method="init"
          lazy-init="true">
        <constructor-arg ref="memcacheJdbcTemplate"/>
        <constructor-arg ref="callIdentificationLoader"/>
    </bean>
</beans>
